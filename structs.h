/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'client'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct RecvTable;
struct RecvProp;

/* 127 */
struct RecvProp
{
  char *m_pVarName;
  int m_RecvType;
  int m_Flags;
  int m_StringBufferSize;
  bool m_bInsideArray;
  const void *m_pExtraData;
  void *m_pArrayProp;
  void *m_ArrayLengthProxy;
  void *m_ProxyFn;
  void *m_DataTableProxyFn;
  RecvTable *m_pDataTable;
  int m_Offset;
  int m_ElementStride;
  int m_nElements;
  const char *m_pParentArrayPropName;
};

/* 128 */
struct RecvTable
{
  RecvProp *m_pProps;
  int m_nProps;
  void *m_pDecoder;
  char *m_pNetTableName;
  bool m_bInitialized;
  bool m_bInMainList;
};

/* 129 */
struct studioloddata_t
{
  void *m_pMeshData;
  float m_SwitchPoint;
  int numMaterials;
  void **ppMaterials;
  int *pMaterialFlags;
  int *m_pHWMorphDecalBoneRemap;
  int m_nDecalBoneCount;
};

/* 130 */
struct studiohwdata_t
{
  int m_RootLOD;
  int m_NumLODs;
  studioloddata_t *m_pLODs;
  int m_NumStudioMeshes;
};

/* 131 */
struct Vector
{
  float x;
  float y;
  float z;
};

/* 132 */
struct __declspec(align(1)) CUserCmd
{
  void* virtualfunctions;
  int command_number;
  int tick_count;
  Vector viewangles;
  Vector aimdirection;
  float forwardmove;
  float sidemove;
  float upmove;
  int buttons;
  _BYTE impulse;
  int weaponselect;
  int weaponsubtype;
  int random_seed;
  __int16 mousedx;
  __int16 mousedy;
  bool hasbeenpredicted;
  Vector headangles;
  Vector headoffset;
};

/* 133 */
struct matrix3x4_t
{
  float m_flMatVal[3][4];
};

/* 134 */
struct studiohdr_t
{
  int id;
  int version;
  int checksum;
  char name[64];
  int length;
  Vector eyeposition;
  Vector illumposition;
  Vector hull_min;
  Vector hull_max;
  Vector view_bbmin;
  Vector view_bbmax;
  int flags;
  int numbones;
  int boneindex;
  int numbonecontrollers;
  int bonecontrollerindex;
  int numhitboxsets;
  int hitboxsetindex;
  int numlocalanim;
  int localanimindex;
  int numlocalseq;
  int localseqindex;
  int activitylistversion;
  int eventsindexed;
  int numtextures;
  int textureindex;
};

/* 135 */
struct mstudiohitboxset_t
{
  int sznameindex;
  int numhitboxes;
  int hitboxindex;
};

/* 136 */
struct mstudiobbox_t
{
  int bone;
  int group;
  Vector bbmin;
  Vector bbmax;
  int unused[4];
  float diameter;
  int unused2[4];
};

/* 137 */
struct ClientClass
{
  void *m_pCreateFn;
  void *m_pCreateEventFn;
  char *m_pNetworkName;
  void *m_pRecvTable;
  void *m_pNext;
  int m_ClassID;
};

/* 138 */
struct player_info_t
{
  _BYTE pad00[8];
  int xuidlow;
  int xuidhigh;
  char name[128];
  int userID;
  char guid[33];
  _BYTE pad02[151];
};

/* 139 */
struct DrawModelInfo_t
{
  studiohdr_t *m_pStudioHdr;
  studiohwdata_t *m_pHardwareData;
  unsigned __int16 m_Decals;
  char gap_A[2];
  int m_Skin;
  int m_Body;
  int m_HitboxSet;
  void *m_pClientEntity;
  int m_Lod;
  void *m_pColorMeshes;
  bool m_bStaticLighting;
  _BYTE m_LightingState[440];
};

/* 140 */
struct __declspec(align(1)) ConVar
{
  _DWORD pad00;
  ConVar *pNext;
  int bRegistered;
  char *pszName;
  char *pszHelpString;
  int nFlags;
  _DWORD pad18;
  ConVar *pParent;
  char *pszDefaultValue;
  char *strString;
  int StringLength;
  float fValue;
  int nValue;
  int bHasMin;
  float fMinVal;
  int bHasMax;
  float fMaxVal;
  void *fnChangeCallback;
};

/* 141 */
struct Vector2D
{
  float x;
  float y;
};

/* 142 */
struct CGlobalVarsBase
{
  float realtime;
  int framecount;
  float absoluteframetime;
  float absoluteframestarttimestddev;
  float curtime;
  float frametime;
  int maxClients;
  int tickcount;
  float interval_per_tick;
  float interpolation_amount;
  int simTicksThisFrame;
  int network_protocol;
  void *pSaveData;
  bool m_bClient;
  bool m_bRemoteClient;
  int nTimestampNetworkingBase;
  int nTimestampRandomizeWindow;
  const char *mapname;
  const char *mapGroupName;
  int mapversion;
  const char *startspot;
  int eLoadType;
  bool bMapLoadFailed;
  bool deathmatch;
  bool coop;
  bool teamplay;
  int maxEntities;
  int serverCount;
  void *pEdicts;
};

/* 143 */
struct VectorAligned
{
  float x;
  float y;
  float z;
  float w;
};

/* 144 */
struct __declspec(align(1)) Ray_t
{
  VectorAligned m_Start;
  VectorAligned m_Delta;
  VectorAligned m_StartOffset;
  VectorAligned m_Extents;
  const matrix3x4_t *m_pWorldAxisTransform;
  char m_IsRay;
  char m_IsSwept;
};

/* 145 */
struct __declspec(align(1)) csurface_t
{
  const char *name;
  __int16 surfaceProps;
  unsigned __int16 flags;
};

/* 146 */
struct __declspec(align(1)) cplane_t
{
  Vector normal;
  float dist;
  unsigned __int8 type;
  unsigned __int8 signbits;
  unsigned __int8 pad[2];
};

/* 147 */
struct __declspec(align(1)) trace_t
{
  Vector start;
  Vector endpos;
  cplane_t plane;
  float fraction;
  int contents;
  _BYTE dispFlags[2];
  _BYTE allSolid;
  _BYTE startSolid;
  float fractionLeftSolid;
  csurface_t surface;
  int hitgroup;
  __int16 physicsBone;
  _BYTE m_nWorldSurfaceIndex[2];
  void *m_pEnt;
  int hitbox;
};

/* 148 */
struct surfacephysicsparams_t
{
  float friction;
  float elasticity;
  float density;
  float thickness;
  float dampening;
};

/* 149 */
struct surfaceaudioparams_t
{
  float reflectivity;
  float hardnessFactor;
  float roughnessFactor;
  float roughThreshold;
  float hardThreshold;
  float hardVelocityThreshold;
};

/* 150 */
struct surfacesoundnames_t
{
  unsigned __int16 stepleft;
  unsigned __int16 stepright;
  unsigned __int16 impactSoft;
  unsigned __int16 impactHard;
  unsigned __int16 scrapeSmooth;
  unsigned __int16 scrapeRough;
  unsigned __int16 bulletImpact;
  unsigned __int16 rolling;
  unsigned __int16 breakSound;
  unsigned __int16 strainSound;
};

/* 151 */
struct __declspec(align(4)) surfacegameprops_t
{
  float maxSpeedFactor;
  float jumpFactor;
  char pad00[4];
  float penetrationModifier;
  float damageModifier;
  unsigned __int16 material;
  char pad01[3];
};

/* 152 */
struct surfacedata_t
{
  surfacephysicsparams_t physics;
  surfaceaudioparams_t audio;
  surfacesoundnames_t sounds;
  surfacegameprops_t game;
};

/* 153 */
struct CCSWeaponInfo
{
  _BYTE pad00[1984];
  void *iconActive;
  _BYTE pad774[60];
  float m_ArmorRatio;
  _BYTE pad02[16];
  float m_Penetration;
  int m_Damage;
  float m_Range;
  float m_RangeModifier;
  int m_BulletsPerShot;
};

/* 156 */
struct EngineTrace_VTable
{
  int (__thiscall *GetPointContents)(int this, Vector *vecAbsPosition, int contentsMask, void ***ppEntity);
  int pad01;
  int pad02;
  void (__thiscall *ClipRayToEntity)(void *, Ray_t *, unsigned int, void *, trace_t *);
  int pad04;
  void (__thiscall *TraceRay)(int this, Ray_t *ray, unsigned int fMask, void *pTraceFilter, trace_t *pTrace);
};

/* 157 */
struct EngineTrace
{
  EngineTrace_VTable *vtable;
};

/* 158 */
class c_animstate
{
public:
	char pad[4];
	char bUnknown; //0x4
	char pad2[91];
	void* pBaseEntity; //0x60
	void* pActiveWeapon; //0x64
	void* pLastActiveWeapon; //0x68
	float m_flLastClientSideAnimationUpdateTime; //0x6C
	int m_iLastClientSideAnimationUpdateFramecount; //0x70
	float m_flEyePitch; //0x74
	float m_flEyeYaw; //0x78
	float m_flPitch; //0x7C
	float m_flGoalFeetYaw; //0x80
	float m_flCurrentFeetYaw; //0x84
	float m_flCurrentTorsoYaw; //0x88
	float m_flUnknownVelocityLean; //0x8C //changes when moving/jumping/hitting ground
	float m_flLeanAmount; //0x90
	char pad4[4]; //NaN
	float m_flFeetCycle; //0x98 0 to 1
	float m_flFeetYawRate; //0x9C 0 to 1
	float m_fUnknown2;
	float m_fDuckAmount; //0xA4 0 to 1; 1 - fully ducked, 0 - fully standing
	float m_fLandingDuckAdditiveSomething; //0xA8
	float m_fUnknown3; //0xAC
	Vector m_vOrigin; //0xB0, 0xB4, 0xB8
	Vector m_vLastOrigin; //0xBC, 0xC0, 0xC4
	float m_vVelocityX; //0xC8
	float m_vVelocityY; //0xCC
	char pad5[4];
	float m_flUnknownFloat1; //0xD4 Affected by movement and direction
	char pad6[8];
	float m_flUnknownFloat2; //0xE0 //from -1 to 1 when moving and affected by direction
	float m_flUnknownFloat3; //0xE4 //from -1 to 1 when moving and affected by direction
	float m_unknown; //0xE8
	float speed_2d; //0xEC
	float flUpVelocity; //0xF0
	float m_flSpeedNormalized; //0xF4 //from 0 to 1
	float m_flFeetSpeedForwardsOrSideWays; //0xF8 //from 0 to 2. something  is 1 when walking, 2.something when running, 0.653 when crouch walking
	float m_flFeetSpeedUnknownForwardOrSideways; //0xFC //from 0 to 3. something
	float m_flTimeSinceStartedMoving; //0x100
	float m_flTimeSinceStoppedMoving; //0x104
	unsigned char m_bOnGround; //0x108
	unsigned char m_bInHitGroundAnimation; //0x109
	char pad7[10];
	float m_flLastOriginZ; //0x114
	float m_flHeadHeightOrOffsetFromHittingGroundAnimation; //0x118 from 0 to 1, is 1 when standing
	float m_flStopToFullRunningFraction; //0x11C from 0 to 1, doesnt change when walking or crouching, only running
	char pad8[4]; //NaN
	float m_flUnknownFraction; //0x124 affected while jumping and running, or when just jumping, 0 to 1
	char pad9[4]; //NaN
	float m_flUnknown3;
	char pad10[528];
};
